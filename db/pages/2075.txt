Date: 2011-03-13 18:04:12
Author: evilsocket
Categories: Misc
Tags: wordpress, swg, static, html, github
Title: Time to go static! Pubblicato SWG

Come vi avevo promesso <a href="http://www.evilsocket.net/addio-wordpress-benvenuto-swg.html">ieri</a>, ho pubblicato SWG su <a href='https://github.com/evilsocket/SWG' target='_blank'>github</a>
sperando che possa servire a qualcun'altro oltre che a me :)

Ma vediamo un po una panoramica di cosa è e come funziona SWG.

<break>

SWG, ovvero Static Website Generator (viva la fantasia XD), è un generatore di siti statici di nuova generazione (e fin qui ...), caratterizzato dal template system <a href='http://www.makotemplates.org/'>Mako</a> e 
nato dalla (mia) necessità di avere sia le performance che un sito statico può offrire, sia contenuti e funzionalità in stile "web 2.0".

Dato un insieme di file, uno per ogni pagina/articolo, uno per ogni autore e uno per la gerarchia delle categorie, SWG leggerà il file di configurazione che gli verrà specificato da riga di comando e genererà
un sito web completamente statico partendo da quei contenuti, comprese le indicizzazioni per tag, categoria, autore ecc.

<h2>Un file di configurazione di esempio</h2>

<pre>
<code>
  # Path of the db, templates and so on
  datapath   = example-site.com
  # Path of the db
  dbpath     = example-site.com/db
  # DB files extension
  dbitem_ext = txt
  # Category hierarchy file
  hierarchy  = example-site.com/db/categories.txt
  # Templates path
  tplpath    = example-site.com/templates
  # Template cache path
  tplcache   = example-site.com/cache
  # URL of the site you are going to generate
  siteurl    = http://www.example-site.com
  # Site name / description
  sitename   = An example site generated by SWG
  # Site charset
  charset    = utf-8
  # Site language
  language   = it
  # Comma separated site keywords
  keywords   = some, html, keywords, here
  # Site destination basepath
  basepath   = 
  # Site page files output extension
  page_ext   = html
  # Generated site output path
  outputpath = out
  # Items (dirs or files) to copy from datapath to outputpath (eg. static files, css, etc)
  copypaths  = css, images, .htaccess
</code>
</pre>

Si spiega da solo no? :)

<h2>Un sito/progetto di esempio</h2>

Nel repository troverete la cartella <b>example-site.com</b> la quale contiene un progetto di esempio, con i template, il db e tutto ciò
di cui avete bisogno per iniziare a farvi un idea.

Per iniziare la generazione date il comando:

<pre>
<code>
python swg.py example-site.com/example-site.com.cfg
</code>
</pre>

E vedrete un output del tipo:

<pre>
<code>
  - SWG 1.0.0 by Simone 'evilsocket' Margaritelli &lt;evilsocket@gmail.com&gt; -

  @ Parsing pages ...
  @ Sorting pages by date ...
  @ Creating 'out' path ...
  @ Importing 'example-site.com/images' to 'out/images' ...
  @ Importing 'example-site.com/.htaccess' to 'out/.htaccess' ...
  @ Importing 'example-site.com/css' to 'out/css' ...
  @ Creating index file ...
  @ Creating 404 file ...
  @ Creating sitemap.xml file ...
  @ Creating feed.xml file ...
  @ Rendering 5 pages ...
  @ DONE  
</code>
</pre>

La cartella <b>out</b> verrà creata e potrete uploadarla sul vostro web server per visualizzare il sito di esempio.<br/>
Se invece volete testare il sito localmente (senza un webserver ad esempio), dovrete cambiare la seguente riga nel file di configurazione:

<pre>
<code>
siteurl    = http://www.example-site.com
</code>
</pre>

In qualcosa del tipo:

<pre>
<code>
siteurl    = file:///your/project/path/out
</code>
</pre>

E poi semplicemente aprire il file <b>out/index.html</b> con il vostro browser web.

Come potrete vedere le potenzialità sono infinite, nessun generatore di siti statici attualmente esistente offre le stesse possibilità di SWG,
questo sito stesso, che precedentemente come saprete era basato su Wordpress, è stato completamente convertito senza rinunciare alla minima
funzionalità, persino la ricerca nel sito (con un hack dell'htaccess :D) e il sistema di commenti sono stati convertiti ^^

Enjoy ^^
