/***************************************************************************
 *   gcc x11_example.c -o x11ex -lX11                                      *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/
#include <stdio.h>
#include <X11/Xlib.h>
#include <X11/Xutil.h>
#include <X11/Xos.h>

int main(){
	Display           *display = NULL;
    Window             window;
    GC                 gc;
	XWindowAttributes  wattr;
	unsigned int       width   = 800,
				       height  = 600;
	char               title[] = { "Hello world from X11 ! :D" };
	
	// apro il display di default
	if( (display = XOpenDisplay(NULL)) == NULL ){
		printf( "Impossibile aprire il display di default .\n" );
		return 1;
	}
	
	// creo la finestra sullo schermo di default
	unsigned int screen  = DefaultScreen(display);
	window = XCreateSimpleWindow( display, 
	  							  RootWindow( display, screen ),
								  0 /* X */, 
								  0 /* Y */, 
								  width, 
								  height, 
								  0,
								  BlackPixel( display, screen ), 
								  WhitePixel( display, screen ) );
	
	// imposto la grandezza della finestra
	XSizeHints xsizeh;
	xsizeh.flags      = USPosition | USSize;
	xsizeh.x          = 0;
	xsizeh.y          = 0;
	xsizeh.width      = width;
	xsizeh.height     = height;
	xsizeh.min_width  = width;
	xsizeh.min_height = height;
	xsizeh.max_width  = width;
	xsizeh.max_height = height;
	
	XSetNormalHints( display, window, &xsizeh );
	XSetWMSizeHints( display, window, &xsizeh, PSize | PMinSize | PMaxSize );
	XStoreName( display, window, title );

	// creo il contesto grafico
	XGCValues     values;
	unsigned long vmask = 0;
	
	XGetWindowAttributes( display, window, &wattr );
	gc = XCreateGC( display, window, vmask, &values );
	XSetBackground( display, gc, WhitePixel( display, screen ) );
	XSetForeground( display, gc, BlackPixel( display, screen ) );
	XSetLineAttributes( display, gc, 1, LineSolid, CapRound, JoinRound );
	
	XSetWindowAttributes attr[1];
	attr[0].backing_store  = Always;
	attr[0].backing_planes = 1;
	attr[0].backing_pixel  = BlackPixel( display, screen );
	XChangeWindowAttributes( display, window, CWBackingStore | CWBackingPlanes | CWBackingPixel, attr );

	// imposto la maschera degli eventi che voglio ricevere
	long eventmask = ExposureMask        | 
					 KeyPressMask        | KeyReleaseMask    |
					 ButtonPressMask     | ButtonReleaseMask |
					 PointerMotionMask   | StructureNotifyMask | 
					 SubstructureRedirectMask | VisibilityChangeMask;
	XSelectInput( display, window, eventmask );
	
	// attendo la creazione effettiva della finestra
	XMapWindow( display, window );
	XSync( display, 0 );

	// leggo l'evento nella finestra
	XEvent event;
	while(1){
		XNextEvent( display, &event );
		switch(event.type) {
			case CreateNotify : 
				printf( "Finestra creata !\n" );
			break;
			
			case DestroyNotify : 
				printf( "Chiusura !\n" );
			break; 
			
			case Expose :
				printf( "Ridisegno il contesto grafico .\n" );
			break;
			
			case KeyPress   : 
			case KeyRelease : 
				if( event.xkey.type == KeyPress ){
					printf( "Tasto premuto : %d .\n", event.xkey.keycode );
				}
				else{
					printf( "Tasto rilasciato : %d .\n", event.xkey.keycode );
				}
			break;
			
			case ButtonPress   : 
			case ButtonRelease : 
				if( event.xbutton.type == ButtonPress ){
					printf( "Bottone mouse '%d' premuto alle coordinate : %d - %d .\n", event.xbutton.button, event.xbutton.x, event.xbutton.y );
				}
				else{
					printf( "Bottone mouse '%d' rilasciato alle coordinate : %d - %d .\n", event.xbutton.button, event.xbutton.x, event.xbutton.y );
				}
			break;
			
			case MotionNotify : 
				printf( "Movimento del mouse su %d - %d .\n", event.xmotion.x, event.xmotion.y );
			break;
		}
	}
	
	return 0;
}
