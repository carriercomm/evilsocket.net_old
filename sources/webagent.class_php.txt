<?php
/***************************************************************************
 *   WebAgent PHP Class                                                    *
 *                                                                         *
 *   Copyleft 2008-2009 by evilsocket                                      *
 *                                                                         *
 *   http://www.evilsocket.net                                             *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 *                                                                         *
 ***************************************************************************/

class HttpResponse {
	private $buffer;
	private $headers;
	private $content;
	
	public function __construct( $buffer ){
		$this->buffer  = trim($buffer);
		$this->headers = array();
		$this->content = "";
		
		$this->parse();
		
		unset($this->buffer);
	}
	
	public function getHeaders(){
		return $this->headers;
	}
	
	public function getHeader( $key ){
		return $this->headers[$key];
	}
	
	public function getContent(){
		return $this->content;
	}
	
	private function parse(){
		$chunks        = explode( "\r\n\r\n", $this->buffer, 2 );
		$head          = trim($chunks[0]);
		$this->content = trim($chunks[1]);
		
		$headers = explode( "\n", $head );
		foreach( $headers as $line ){
			$line = trim($line);
			
			if( preg_match_all("/^HTTP\/[\d]+\.[\d]+ ([\d]+) (.+)$/",$line,$codes) ){
				$this->headers['STATUS-CODE'] = $codes[1][0];
				$this->headers['STATUS-NAME'] = $codes[2][0];
			}
			else{
				list($key,$value) = explode( ":", $line, 2 );
				$this->headers[strtoupper(trim($key))] = trim($value);
			}
		}
	}
}

define( "WEBAGENT_COOKIE_PATH", "cookies" );

class WebAgent {
	private $headers;
	private $cookies;
	private $sd;
	private $follow_location;
	private $save_cookies;
	private $cookie_file_header;
		
	private function domain( $host ){
		preg_match_all( "/^.+\.([^\.]+\.[^\.]+)$/i", $host, $parts );
		return $parts[1][0];
	}
	
	private function parseCookies( $domain, $buffer ){
		if( preg_match_all( "/Set\-Cookie\:([^\n]+)/is", $buffer, $m ) ){
			$cookies = $m[1];
			if( isset($this->cookies[$domain]) == false ){
				$this->cookies[$domain] = array();
			}
			
			foreach( $cookies as $cookie ){
				$cookie = trim($cookie);
				$cookie = preg_replace( "/([ ]*httponly[ ]*;?)/i",      "", $cookie );
				$cookie = preg_replace( "/([ ]*expires=[^;]+[ ]*;?)/i", "", $cookie );
				$cookie = preg_replace( "/([ ]*path=[^;]+[ ]*;?)/i",    "", $cookie );
				$cookie = preg_replace( "/([ ]*domain=[^;]+[ ]*;?)/i",  "", $cookie );
								
				$couples  = explode( ";", $cookie );
				foreach( $couples as $couple ){
					if( eregi( "=", $couple) ){
						list($key,$value) = explode( "=", $couple, 2 );
						$this->cookies[$domain][urldecode(trim($key))] = urldecode(trim($value));
					}
				}
			}
		}
	}
	
	private function sendCookies($domain){
		if( $this->cookies[$domain] ){
			$rawcookie = "";
			foreach( $this->cookies[$domain] as $key => $value ){
				$rawcookie .= urlencode($key)."=".urlencode($value).";";
			}
			fputs( $this->sd, "Cookie: $rawcookie\r\n" );
		}
	}
	
	public function __construct( $load_cookies = false ){
		$this->headers = array();
		
		$this->headers['User-Agent']      = "WebAgent/1.0 (NDR; it)";
		$this->headers['Accept']          = "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8";
		$this->headers['Accept-Language'] = "it-it,it;q=0.8,en-us;q=0.5,en;q=0.3";
		$this->headers['Accept-Encoding'] = /*gzip,*/"deflate";
		$this->headers['Accept-Charset']  = "ISO-8859-1,utf-8;q=0.7,*;q=0.7";
		$this->headers['Connection']      = "close";
		
		$this->cookies = array();
		
		$this->follow_location = false;
	    $this->save_cookies    = false;
		$this->sd              = null;
		
		if( $load_cookies ){
			$this->loadCookies();
		}
	}
	
	public function __destruct() {
		if( $this->save_cookies ){
			if( @file_exists(WEBAGENT_COOKIE_PATH) ){
				foreach( $this->cookies as $domain => $cookie ){
					if( $this->cookie_file_header != null ){
						$domain = $this->cookie_file_header.$domain;
					}
					$fd = @fopen( WEBAGENT_COOKIE_PATH."/$domain.dat", "w+t" );
					@fputs( $fd, serialize($cookie) );
					@fclose($fd);
				}
			}
		}
	}
	
	public function loadCookies( $filename = null, $domain = null ){
		if( @file_exists(WEBAGENT_COOKIE_PATH) ){
			if( $filename == null ){
				if( $dir = opendir(WEBAGENT_COOKIE_PATH) ){
			    	while($file = readdir($dir)){
			        	if( preg_match_all( "/^(.+)\.dat\$/", $file, $domain ) ){
							$domain = $domain[1][0];
							$this->cookies[$domain] = unserialize(trim(@file_get_contents(WEBAGENT_COOKIE_PATH."/$file")));
						}
			    	}
			    	closedir($dir);
				}
			}
			else{
				if( file_exists(WEBAGENT_COOKIE_PATH."/$filename") ){
					$this->cookies[$domain] = unserialize(trim(@file_get_contents(WEBAGENT_COOKIE_PATH."/$filename")));
				}
			}
		}
	}
	
	public function saveCookies( $save, $file_header = null ){
		$this->save_cookies       = $save;
		$this->cookie_file_header = $file_header;
	}
	
	public function followLocation( $follow ){
		$this->follow_location = $follow;
	}
	
	public function setHeader( $key, $value ){
		$this->headers[$key] = $value;
	}
	
	public function getHeader( $key ){
		return $this->headers[$key];
	}
	
	public function getCookie( $domain, $key ){
		return $this->cookies[$domain][$key];
	}
	
	public function get( $url ){
		$tgt      = parse_url($url);
		$domain   = $this->domain($tgt['host']);
		$this->sd = fsockopen( $tgt['host'], 80 );
		if( !$this->sd ){
			return null;
		}
		
		fputs( $this->sd, "GET ".$tgt['path']."?".$tgt['query']." HTTP/1.0\r\n" );
		fputs( $this->sd, "Host: ".$tgt['host']."\r\n" );
		
		$this->sendCookies($domain);
		
		foreach( $this->headers as $key => $value ){
			fputs( $this->sd, "$key: $value\r\n" );
		}
		fputs( $this->sd, "\r\n" );
		
		$buffer = "";
		while( !feof($this->sd) ){
			$buffer .= fgets($this->sd);
		}
		fclose($this->sd);
				
		$this->parseCookies($domain,$buffer);
		
		$this->setHeader( "Referer", "http://".$tgt['host'].$tgt['path']."?".$tgt['query'] );
		if( $this->follow_location ){
			if( preg_match_all( "/Location\:([^\n]+)/is", $buffer, $m ) ){
				return $this->get(trim($m[1][0]));
			}
		}

		return new HttpResponse($buffer);
	}
	
	public function post( $url, $_data ){
		$tgt      = parse_url($url);
		$domain   = $this->domain($tgt['host']);
		$this->sd = fsockopen( $tgt['host'], 80 );
		if( !$this->sd ){
			return null;
		}

		fputs( $this->sd, "POST ".$tgt['path']."?".$tgt['query']." HTTP/1.0\r\n" );
		fputs( $this->sd, "Host: ".$tgt['host']."\r\n" );

		$this->sendCookies($domain);
		
		$data = array();    
		while(list($key,$value) = each($_data)){
			$data[] = urlencode($key)."=".urlencode($value);
		}    
		$data = implode( '&', $data );
		
		$this->setHeader( "Content-type",   "application/x-www-form-urlencoded" );	
		$this->setHeader( "Content-length", strlen($data) );		
		foreach( $this->headers as $key => $value ){
			fputs( $this->sd, "$key: $value\r\n" );
		}		
		fputs( $this->sd, "\r\n" );
		fputs( $this->sd, $data );

		unset( $this->headers["Content-type"] );
		unset( $this->headers["Content-length"] );

		$buffer = "";
		while( !feof($this->sd) ){
			$buffer .= fgets($this->sd);
		}
		fclose($this->sd);
		$this->parseCookies($domain,$buffer);
		
		$this->setHeader( "Referer", "http://".$tgt['host'].$tgt['path']."?".$tgt['query'] );

		if( $this->follow_location ){
			if( preg_match_all( "/Location\:([^\n]+)/is", $buffer, $m ) ){
				return $this->get(trim($m[1][0]));
			}
		}

		return new HttpResponse($buffer);
	}
}

?>